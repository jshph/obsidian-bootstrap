/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => Caterpillage
});
var import_obsidian = __toModule(require("obsidian"));
var path = __toModule(require("path"));
var fs = __toModule(require("fs"));
var DEFAULT_SETTINGS = {
  sourceTag: "#tocopy",
  targetVaultPath: "",
  unwantedPatterns: [],
  pathMappings: []
};
var Caterpillage = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("copy", "Copy Tagged Notes", () => {
      console.log("Copy Tagged Notes");
      this.copyTaggedNotes();
    });
    this.addSettingTab(new CaterpillageSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  getTagListFromFrontmatter(frontmatter) {
    if (!frontmatter.tags || frontmatter.tags.length === 0) {
      return [];
    }
    if (Array.isArray(frontmatter.tags)) {
      return frontmatter.tags.map((tag) => tag.includes("#") ? tag : "#" + tag);
    } else if (typeof frontmatter.tags === "string") {
      return [frontmatter.tags];
    } else {
      return [];
    }
  }
  async copyTaggedNotes() {
    var _a;
    const files = this.app.vault.getMarkdownFiles();
    for (const file of files) {
      const metadata = this.app.metadataCache.getFileCache(file);
      let tags = ((_a = metadata.tags) == null ? void 0 : _a.map((tag) => tag.tag)) || [];
      if (metadata == null ? void 0 : metadata.frontmatter) {
        tags = [
          ...tags,
          ...this.getTagListFromFrontmatter(metadata == null ? void 0 : metadata.frontmatter)
        ];
      }
      if (tags == null ? void 0 : tags.includes(this.settings.sourceTag)) {
        const processedContent = await this.processContent(file);
        const fileName = path.basename(file.path);
        const targetPath = path.join(this.settings.targetVaultPath, fileName);
        if (!fs.existsSync(targetPath)) {
          await this.writeFile(targetPath, processedContent);
        }
        if (metadata.embeds) {
          for (const embed of metadata.embeds) {
            const baseLink = embed.link.split("#")[0];
            const embedFile = this.app.metadataCache.getFirstLinkpathDest(baseLink, "/");
            if (!embedFile) {
              continue;
            }
            const embedFileName = path.basename(embedFile.path);
            const embedFileDirectory = path.dirname(embedFile.path);
            const pathMapping = this.settings.pathMappings.find((mapping) => embedFileDirectory.includes(mapping[0]));
            const dir = pathMapping ? path.join(this.settings.targetVaultPath, pathMapping[1]) : this.settings.targetVaultPath;
            const embedTargetPath = path.join(dir, embedFileName);
            if (fs.existsSync(embedTargetPath)) {
              continue;
            }
            const processedContent2 = await this.processContent(embedFile);
            await this.writeFile(embedTargetPath, processedContent2);
          }
        }
      }
    }
  }
  async processContent(file) {
    var _a;
    const content = await this.app.vault.read(file);
    let processedContent = content;
    const combinedRegex = new RegExp(this.settings.unwantedPatterns.join("|"), "g");
    processedContent = processedContent.replace(combinedRegex, "");
    const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (frontmatter && frontmatter.tags) {
      const frontmatterTags = this.getTagListFromFrontmatter(frontmatter);
      frontmatter.tags = frontmatterTags.filter((tag) => tag !== this.settings.sourceTag);
      const yamlFrontmatter = Object.entries(frontmatter).map(([key, value]) => {
        if (Array.isArray(value)) {
          return `${key}:
${value.map((item) => `  - ${item}`).join("\n")}`;
        } else if (value === void 0 || value === null) {
          return `${key}:`;
        }
        return `${key}: ${value}`;
      }).join("\n");
      processedContent = processedContent.replace(/---[\s\S]*?---/, `---
${yamlFrontmatter}
---`);
    }
    return processedContent;
  }
  async writeFile(filePath, content) {
    await fs.promises.mkdir(path.dirname(filePath), { recursive: true });
    await fs.promises.writeFile(filePath, content, "utf8");
  }
};
var CaterpillageSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Source Tag").setDesc("Tag to identify notes to be copied").addText((text) => text.setPlaceholder("Enter tag").setValue(this.plugin.settings.sourceTag).onChange(async (value) => {
      this.plugin.settings.sourceTag = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Target Vault Path").setDesc("Path to the target vault").addText((text) => text.setPlaceholder("Enter path").setValue(this.plugin.settings.targetVaultPath).onChange(async (value) => {
      this.plugin.settings.targetVaultPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Unwanted Patterns").setDesc("Regex patterns to match and remove unwanted content").addTextArea((text) => text.setPlaceholder("Enter unwanted regex patterns (newline-separated)").setValue(this.plugin.settings.unwantedPatterns.join("\n")).onChange(async (value) => {
      this.plugin.settings.unwantedPatterns = value.split("\n");
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Path Mappings").setDesc("Newline-separated source and destination path mappings (e.g., source1,destination1 <newline> source2,destination2)").addTextArea((text) => text.setPlaceholder("Enter path mappings").setValue(this.plugin.settings.pathMappings.map((mapping) => mapping.join(",")).join("\n")).onChange(async (value) => {
      this.plugin.settings.pathMappings = value.split("\n").map((mapping) => mapping.split(",").map((item) => item.trim()));
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
